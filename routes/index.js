var express = require('express');
var router = express.Router();
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
require('dotenv').config();


const UserModel = require('../models/userModel'); // Import model User
const SubjectModel = require('../models/subjectModel'); // Import model User
const ScoreModel = require('../models/scoreModel'); // Import model User
const MessageModel = require('../models/messageModel'); // Import model User
const MeetingModel = require('../models/meetingModel'); // Import model User
const EmailModel = require('../models/emailModel'); // Import model User
const BlogModel = require('../models/blogModel'); // Import model User


/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

router.get('/login', function(req, res, next){
  res.render('user/login');
});

router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body); 

    if (!email?.trim() || !password?.trim()) {
      return res.send("<script>alert('Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u!');history.back();</script>");
    }

    const user = await UserModel.findOne({ email });

    if (!user) {
      return res.send("<script>alert('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!');history.back();</script>");
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.send("<script>alert('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!');history.back();</script>");
    }

    console.log("üîë JWT Secret Key:", process.env.JWT_SECRET);
    console.log("üîê T·∫°o token...");
    const token = jwt.sign({ userId: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });

    // ƒê·∫£m b·∫£o session ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi g√°n gi√° tr·ªã
    if (!req.session) {
      console.error("‚ùå Session ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
      return res.status(500).send("L·ªói server: Session ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.");
    }

    // L∆∞u th√¥ng tin user v√†o session
    req.session.user = { 
      id: user._id, 
      name: user.name, 
      email: user.email, 
      role: user.role 
    };

    let redirectUrl = "/"; // M·∫∑c ƒë·ªãnh
    switch (user.role) {
      case "admin":
        redirectUrl = "/users/homeadmin";
        break;
      case "staff":
        redirectUrl = "/users/homestaff";
        break;
      case "authorized":
        redirectUrl = "/users/homestaff";
        break;
      case "tutor":
        redirectUrl = "/users/hometutor";
        break;
      case "student":
        redirectUrl = "/users/homestudent";
        break;
      default:
        return res.send("<script>alert('Role kh√¥ng h·ª£p l·ªá!');history.back();</script>");
    }

    console.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Role: ${user.role}. Chuy·ªÉn h∆∞·ªõng ƒë·∫øn: ${redirectUrl}`);
    return res.redirect(redirectUrl);

  } catch (error) {
    console.error("üö® L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).send("L·ªói server");
  }
});

router.get('/create', function(req, res, next) {
  if (!req.session.user || (req.session.user.role !== 'admin' && req.session.user.role !== 'staff')) {
    return res.redirect('/login'); // N·∫øu kh√¥ng ph·∫£i admin ho·∫∑c staff, chuy·ªÉn v·ªÅ ƒëƒÉng nh·∫≠p
  }
  res.render('user/create', { user: req.session.user });
});

router.post('/create', async (req, res) => {
  try {
    const { name, email, phone, password, role, gender, address, tutor_id } = req.body;

    console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body); // Debug d·ªØ li·ªáu request

    const createdBy = req.session.user;
    console.log("User ƒëang log:", createdBy); // Debug d·ªØ li·ªáu request

    if (!email?.trim() || !password?.trim()) {
      return res.send("<script>alert('Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u h·ª£p l·ªá!');history.back();</script>");
    }

    const existingUser = await UserModel.findOne({ email });
    if (existingUser) {
      return res.send("<script>alert('Email ƒë√£ t·ªìn t·∫°i!');history.back();</script>");
    }

    // Ki·ªÉm tra n·∫øu role l√† student th√¨ b·∫Øt bu·ªôc ph·∫£i c√≥ tutor_id
    if (role === "student" && (!tutor_id || tutor_id.trim() === "")) {
      return res.send("<script>alert('Student ph·∫£i ch·ªçn gia s∆∞ c√° nh√¢n!');history.back();</script>");
    }

    // Ki·ªÉm tra n·∫øu tutor_id t·ªìn t·∫°i v√† l√† tutor h·ª£p l·ªá
    if (role === "student") {
      const tutorExists = await UserModel.findOne({ _id: tutor_id, role: "tutor" });
      if (!tutorExists) {
        return res.send("<script>alert('Gia s∆∞ kh√¥ng h·ª£p l·ªá!');history.back();</script>");
      }
    }

    // X√°c ƒë·ªãnh ng∆∞·ªùi t·∫°o (staff)
    let createdById = null;
    if (req.session.user && req.session.user.role === "staff") {
      if (role === "student" || role === "tutor") {
        createdById = req.session.user._id;
      }
    }

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password.trim(), 10);

    // T·∫°o user
    await UserModel.create({
      name,
      email,
      phone,
      password: hashedPassword,
      role,
      gender,
      address,
      tutor_id: role === "student" ? staff_id : null, // Ch·ªâ l∆∞u tutor_id n·∫øu l√† student
      created_by: createdById, // L∆∞u staff t·∫°o user n√†y
    });

    res.send("<script>alert('T·∫°o t√†i kho·∫£n th√†nh c√¥ng!'); window.location.href='/login';</script>");

  } catch (error) {
    console.error("Register error:", error);
    res.status(500).send("L·ªói server khi t·∫°o t√†i kho·∫£n!");
  }
});

// router.post('/create', async (req, res) => {
//   try {
//     const { name, email, phone, password, role, gender, address } = req.body;

//     console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body); // Debug xem req.body c√≥ d·ªØ li·ªáu kh√¥ng

//     if (!email?.trim() || !password?.trim()) {
//       return res.send("<script>alert('Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u h·ª£p l·ªá!');history.back();</script>");
//     }

//     const existingUser = await UserModel.findOne({ email });
//     if (existingUser) {
//       return res.send("<script>alert('Email ƒë√£ t·ªìn t·∫°i!');history.back();</script>");
//     }

//     // ƒê·∫£m b·∫£o password kh√¥ng ph·∫£i undefined/null
//     const cleanPassword = password.trim();
//     if (!cleanPassword) {
//       return res.send("<script>alert('M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!');history.back();</script>");
//     }

//     const hashedPassword = await bcrypt.hash(cleanPassword, 10);

//     await UserModel.create({ name, email, phone, password: hashedPassword, role, gender, address });

//     res.send("<script>alert('T·∫°o t√†i kho·∫£n th√†nh c√¥ng!'); window.location.href='/login';</script>");
//   } catch (error) {
//     console.error("Register error:", error);
//     res.status(500).send("L·ªói server");
//   }
// });

router.get('/logout', function(req, res) {
  req.session.destroy((err) => {
      if (err) {
          console.error('L·ªói khi ƒëƒÉng xu·∫•t:', err);
          return res.status(500).json({ message: 'L·ªói khi ƒëƒÉng xu·∫•t' });
      }
      res.redirect('/login');
  });
});

module.exports = router;
